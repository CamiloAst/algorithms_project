@INPROCEEDINGS{8363469,
  author={Sabitzer, Barbara and Demarle-Meusel, Heike and Jarnig, Maria},
  booktitle={2018 IEEE Global Engineering Education Conference (EDUCON)}, 
  title={Computational thinking through modeling in language lessons}, 
  year={2018},
  volume={},
  number={},
  pages={1913-1919},
  abstract={In contrast to the field of computer-supported or computer-assisted language learning (CALL), which has been investigated intensively for the last decades since the beginning of e-learning and technology-enhanced learning, computational thinking and computer science concepts are not quite common in the context of language lessons. Computational thinking is a problem solving process that, at first sight, has not much to do with language learning. However, as demanded by Jeannette Wing in 2006, it should be taught to everyone like reading, writing and mathematics. By introducing computational thinking in language lessons e.g. through modeling we could "kill two birds with one stone": On the one hand, we can teach computational thinking and basics of computer science at all school levels even if there is no related subject, e.g. in primary schools. On the other hand, computational thinking tools like modeling can support language learning in different ways and help to train text comprehension, to acquire and elaborate vocabulary or to visualize grammar rules etc. This paper describes some creative possibilities of introducing computational thinking through modeling in language lessons in primary and secondary education. Besides best practices, it further presents some experiences and results gained from teacher observation, interviews and informal feedback from students and teachers.},
  keywords={Computational modeling;Unified modeling language;Education;Object oriented modeling;Conferences;Problem-solving;computational thinking;modeling;education;language learning},
  doi={10.1109/EDUCON.2018.8363469},
  ISSN={2165-9567},
  month={April},}@INPROCEEDINGS{7207372,
  author={Mohan, Aravind and Lu, Shiyong and Zhang, Ke},
  booktitle={2015 IEEE International Conference on Services Computing}, 
  title={Towards an Online Service for Learning Computational Thinking Using Scientific Workflows}, 
  year={2015},
  volume={},
  number={},
  pages={340-347},
  abstract={Computational thinking has recently been widely recognized as a fundamental skill that should be cultivated for everyone and in every field. Although there is an increasing interest in research in teaching and learning computational thinking in recent years, an engaging, effective online learning system is yet to be built for teaching, learning, and applying computational thinking online. To this end, we have developed DATAVIEW, an online social learning system for learning computational thinking concepts and skills online. The main contributions of this paper are: 1) we developed a new, effective online learning model for computational thinking based on our previous widely-applied R2D2 model. A signature characteristic of this new model is being interactive and learner-centered, thus "i" is carried out through the entire learning experiences, which provides teaching facilities to instructors and interactional tools among instructors and learners, 2) we implemented, validated, and refined iR2D2 in our DATAVIEW computational thinking online service, 3) We propose to use the DBR (design-based-research) approach to study the relationship between technology and teaching in the context of computational thinking, generating research results and findings applicable to online teaching in other domains as well.},
  keywords={Education;Computational modeling;Computers;Algebra;Learning systems;Computational efficiency;Visualization;computational thinking;eLearning;scientific workflow management systems;DATAVIEW},
  doi={10.1109/SCC.2015.54},
  ISSN={},
  month={June},}@INPROCEEDINGS{8845505,
  author={Xu, Ling and Tong, Ming-Wen and Li, Bin and Meng, Jiang and Fan, Chen-Yao},
  booktitle={2019 14th International Conference on Computer Science & Education (ICCSE)}, 
  title={Application of Concept Map in the Study of Computational Thinking Training}, 
  year={2019},
  volume={},
  number={},
  pages={454-459},
  abstract={The call for innovative talents in the information age is imminent. With the promulgation of the domestic high school information technology curriculum standards in 2017, the formulation and positioning requirements of the core literacy of the disciplines, computational thinking as one of the four core literacy, is the thinking ability that everyone should have. Many foreign educational practice studies have shown that mind mapping can effectively promote students' cognitive development and knowledge construction. However, the domestic educational application research is relatively lacking in this aspect, and there is little research on the comprehensive and in-depth combination of it and the core literacy “computational thinking” of the specific information technology discipline. To this end, based on the research status at home and abroad, this paper attempts to use the concept map tool to represent several important functions of computational thinking, "definition of problems", "abstract function", "build model" and "Debugging and improvement". The diagram incorporates the teaching model in the computational thinking development curriculum. This study used quasi-experimental research methods to explore the effect of conceptual map tools on students' computational thinking. The research results show that this teaching method has a significant effect on the development of students' computational thinking.},
  keywords={Education;Tools;Programming;Visualization;Computational modeling;Creativity;Standards;computational thinking;concept map;project-based learning},
  doi={10.1109/ICCSE.2019.8845505},
  ISSN={2473-9464},
  month={Aug},}@INPROCEEDINGS{10216563,
  author={Ragonis, Noa and Hazzan, Orit},
  booktitle={2022 International Conference on Computational Science and Computational Intelligence (CSCI)}, 
  title={A MOOC on Computational Thinking for All: Pedagogical Principles, Challenges, and Their Application}, 
  year={2022},
  volume={},
  number={},
  pages={1943-1949},
  abstract={For the last two decades, the world of pre-academic and academic education has been occupied with ways of developing computational thinking. Responding to the common perception to develop those thinking skills in all learners, and indeed in the entire population, we developed a MOOC on computational thinking. The course advocates the development of computational thinking skills in every human being, at any age, and in any subject matter, emphasizing the common, essential computational thinking skills: problem decomposition, abstraction, and generalization. Based on our belief in the importance of the application of computational thinking skills when using computerized environments, and the importance of its significant application in developing an understanding of any discipline, the course is based on the development of simulations of computational processes in any area of knowledge. We widely discuss the pedagogical challenges of developing a MOOC on thinking skills without teacher-learner interaction, and share how we overcame these challenges by implementing the Four Pedagogies for Developing Computational Thinking (4P4CT) framework, which integrates the pedagogies of active learning, project-based learning, product-based learning, and context-based learning. We present preliminary findings from research we conducted during the first two MOOC cycles with about 1,600 learners. Specifically, quantitative and qualitative data analysis of students' learning processes are discussed, reflecting the students' multi-faceted and deep engagement in the MOOC.},
  keywords={Computer aided instruction;Electronic learning;Data analysis;Scientific computing;Computational modeling;Sociology;Education;computational thinking;teacher education;4P4CT;active learning;project-based learning;product-based learning;context-based learning;MOOC},
  doi={10.1109/CSCI58124.2022.00350},
  ISSN={2769-5654},
  month={Dec},}@INPROCEEDINGS{9569311,
  author={Si, Jiarui and Feng, Huan and Niu, Zikun and Bian, Yizhou and Fu, Yu and Guo, Hong and Su, Zhenxing and Deng, Weimin and Li, Xiaoxia},
  booktitle={2021 16th International Conference on Computer Science & Education (ICCSE)}, 
  title={Training Methods of Computational Thinking for Medical Students in Big Data Age}, 
  year={2021},
  volume={},
  number={},
  pages={13-20},
  abstract={The era of big data witnesses that ‘computing’ has become an indispensable tool for medical development in many aspects of medicine domain. The ability of computational thinking is of great significance to medical students engaging in basic research and clinical diagnosis and treatment in the future. However, medical students are lack of this strategy in dealing with problems at present. Meanwhile, there is also a problem of ‘insufficient skills and no training’ in computer learning. In this article, we recommend training students’ computational thinking from three aspects. First, students can learn the basic concepts of computational thinking and different thinking modes of computer scientists through computer courses in both theory and practice in order to train their computational thinking. Second, in the process of thinking, students can directly carry out divergent thinking, logical integration, and practice the thinking methods of scientists such as abstraction and simplification through the mind maps produced by IMindMap software. Third, during the practice of modeling and programming, after using mind maps to make the problem abstract and sort out the content of the creation to draw a flowchart, students start modeling and systematic design through Scratch software. At last, under the help of MATLAB, some specific medical cases enable students to apply computational thinking to practice comprehensively. Our practice in class shows that these training methods has positive influence in improving students computational thinking.},
  keywords={Training;Flowcharts;Systematics;Computational modeling;Big Data;Tools;Software;Medical students;Computational thinking;mind maps;MATLAB},
  doi={10.1109/ICCSE51940.2021.9569311},
  ISSN={2473-9464},
  month={Aug},}@INPROCEEDINGS{8599435,
  author={Chen, Li and Xia, Jiaoxiong and Tao, Jie},
  booktitle={2018 5th International Conference on Systems and Informatics (ICSAI)}, 
  title={Cultivating Computational Thinking Among Students Of Liberal Art In Basic Computer Courses}, 
  year={2018},
  volume={},
  number={},
  pages={544-548},
  abstract={With the concept of Computational Thinking proposed, how to cultivate students' Computational Thinking in basic computer courses has become the focus of basic computer education reform in recent years. Computational Thinking has gradually been recognized by computer educators and has become an important goal of basic computer education. According to the author's experience, the paper analyzes the reasons why students of literal arts also need to acquire Computational Thinking after summarizing the current research status of Computational Thinking at home and abroad. Regarding the cultivation of Computational Thinking ability as a higher level than knowledge learning and skill training, the paper puts forward some improving suggestions on how to cultivate Computational Thinking among students of liberal arts.},
  keywords={Art;Computer science;Writing;Software;Economics;Training;Computational Thinking;Computer Foundation;Students of Liberal Art;Educational Reform},
  doi={10.1109/ICSAI.2018.8599435},
  ISSN={},
  month={Nov},}@INPROCEEDINGS{9962465,
  author={Mohammadi-Aragh, Mahnas Jean and Sun, Yan and Dyer, Jamie L. and Harris, Jonathan G. and Robinson, Chase A. and Bai, Mengni and Kavanagh, Jolie K. and Ball, Kimberly E.},
  booktitle={2022 IEEE Frontiers in Education Conference (FIE)}, 
  title={Teaching Computational Thinking and Spatial Visualization in K-12 with 3D Weather Visualizations}, 
  year={2022},
  volume={},
  number={},
  pages={1-6},
  abstract={This Innovative Practice Full Paper presents a K-12 teacher training workshop for computational thinking instruction. Computational thinking refers to a set of skills that are necessary for success in engineering and science careers. Teaching computational thinking skills prior to university-level enrollment helps students be more successful in their degree programs. Our project serves as an attempt to innovate science education by designing and testing data-driven, scientific inquiry experiences that integrate teaching and learning of atmospheric science with computational thinking and practices in authentic, innovative, and effective ways. In this paper, we describe our design process for developing authentic computational thinking and spatial visualization modules for the two-week computational thinking professional development that uses 3D weather visualizations to train K-12 teachers in eleven computational thinking and spatial visualization skills.},
  keywords={Training;Three-dimensional displays;Data analysis;Engineering profession;Conferences;Education;Data visualization;computational thinking;spatial visualization;K-12},
  doi={10.1109/FIE56618.2022.9962465},
  ISSN={2377-634X},
  month={Oct},}@INPROCEEDINGS{5635189,
  author={Koh, Kyu Han and Basawapatna, Ashok and Bennett, Vicki and Repenning, Alexander},
  booktitle={2010 IEEE Symposium on Visual Languages and Human-Centric Computing}, 
  title={Towards the Automatic Recognition of Computational Thinking for Adaptive Visual Language Learning}, 
  year={2010},
  volume={},
  number={},
  pages={59-66},
  abstract={Visual programming languages can be used to make computer science more accessible to a broad range of students. The evaluative focus of current research in the area of visual languages for educational purposes primarily aims to better understand motivational benefits as compared to traditional programming languages. Often these visual languages claim to teach students computational thinking concepts; however, although the evaluations show that students may exhibit more enthusiasm, it is not always clear what computational thinking concepts students have actually learned. In this paper we attempt to develop a visual semantic evaluation tool for student-created games and simulations that goes towards depicting the computational thinking concepts implemented by the students. Through semantically analyzing a given student's created projects over time, this visual evaluation tool, called the Computational Thinking Pattern (CTP) graph, can possibly indicate the existence of computational thinking transfer from games to science simulations.},
  keywords={Games;Visualization;Semantics;Programming;Syntactics;Computer languages;Computational modeling;Computational Thinking;Visual Language Programming;Knowledge Transfer},
  doi={10.1109/VLHCC.2010.17},
  ISSN={1943-6106},
  month={Sep.},}@ARTICLE{10345555,
  author={González-Pizarro, Felipe and López, Claudia and Vásquez, Andrea and Castro, Carlos},
  journal={IEEE Transactions on Education}, 
  title={Inequalities in Computational Thinking Among Incoming Students in an STEM Chilean University}, 
  year={2024},
  volume={67},
  number={2},
  pages={180-189},
  abstract={While computational thinking arises as an essential skill worldwide, formal primary and secondary education in Latin America rarely incorporates mechanisms to develop it in their curricula. The extent to which students in the region acquire computational thinking skills remains largely unknown. To start addressing this void, this article presents findings from a cross sectional study that characterizes the computational thinking abilities of incoming students at a Chilean university with a strong emphasis on STEM disciplines. Based on more than 500 responses, this study provides evidence of significant inequalities in computational thinking across gender, type of school (private or no), and prior programming knowledge. The discussion offers insights into how these disparities relate to contextual factors of the country, such as a highly socio-economically segregated educational system, public policies focused mainly on technology access, and heavy reliance on voluntary initiatives, to develop computational thinking. The findings can enlighten upcoming research endeavors and formulate strategies to create a more equitable field for students entering STEM degrees in nations facing similar circumstances.},
  keywords={Programming profession;Training;Education;Conferences;Public policy;Engineering students;Codes;Computational thinking;engineering education;gender;Latin America;public/private schools},
  doi={10.1109/TE.2023.3334193},
  ISSN={1557-9638},
  month={April},}@INPROCEEDINGS{9272507,
  author={Garcia, Patricia and Jackson, Ashley and Jacobs, Laura-Ann},
  booktitle={2020 Research on Equity and Sustained Participation in Engineering, Computing, and Technology (RESPECT)}, 
  title={Centering the Identities of Girls of Color in Computational Thinking Programs}, 
  year={2020},
  volume={1},
  number={},
  pages={1-7},
  abstract={Efforts to broaden participation in computing have revealed the need for a deeper theoretical and empirical understanding of how girls of color form computing identities. In this paper, we use the concept of identities-in-practice as an analytical frame to examine how girls of color engage in computational thinking practices. Our research investigates how the identities of girls of color can be leveraged as funds of knowledge in learning spaces and asks the following research question: How does centering the identities of girls of color impact their engagement with computational thinking practices? We provide a program overview of CompuGirls, describe our curricular design approach, and share results from pilot implementations of the program offered at public libraries in Michigan, Arizona, and California. Results from our pilot year demonstrate that integrating identity exploration into a computational thinking curriculum results in a mutually reinforcing relationship where girls of color experience reflective identity development while simultaneously increasing their understanding of computational thinking. We present our approach as a promising avenue for connecting computing knowledge and skills to girls' identities and lived experiences. By focusing on the girls' identities, the program re-imagines computational experiences by fostering interactions with computational thinking from a personal perspective. Ultimately, we argue that centering girls' identities should be viewed as an integral part of the learning process and not tangential.},
  keywords={Libraries;Color;Cultural differences;Education;Programming profession;Image color analysis;Focusing;computing education;computational thinking;gender},
  doi={10.1109/RESPECT49803.2020.9272507},
  ISSN={},
  month={March},}@INPROCEEDINGS{8308511,
  author={Xiao, Min and Yu, Xiaohua},
  booktitle={2017 International Conference of Educational Innovation through Technology (EITT)}, 
  title={A Model of Cultivating Computational Thinking Based on Visual Programming}, 
  year={2017},
  volume={},
  number={},
  pages={75-80},
  abstract={The traditional information technology course focuses on the learning of programming tools and ignores the development of students' Computational Thinking. The emergence of visual programming tools provides a new opportunity for the training of Computational Thinking. On the basis of studying the limitations of thinking training in the traditional information technology class and the advantages of visual programming in computational thinking, this paper proposes a computational thinking training model based on visual programming. The model based on project adopt the combination of teaching plan and learning plan to design teaching and cultivate Computational Thinking. Applying this model to the actual teaching process by designing a teaching case based on the visual programming tool App Inventor, the experimental results show that the Computational Thinking of students in this model is improved in formalization and modeling. Through proposing this model and verifying its validity, we can provide the feasibility and research ideas for further studies by using visual programming to cultivate students' Computational Thinking.},
  keywords={Visualization;Computational modeling;Tools;Training;Programming profession;Computer Thinking;Visual Programming;Projectbased Learning},
  doi={10.1109/EITT.2017.26},
  ISSN={},
  month={Dec},}@INPROCEEDINGS{6016643,
  author={Chang, Chih-Kai},
  booktitle={The 7th International Conference on Digital Content, Multimedia Technology and its Applications}, 
  title={Integrate social simulation content with game designing curriculum to foster computational thinking}, 
  year={2011},
  volume={},
  number={},
  pages={115-118},
  abstract={Computational thinking is a fundamental analytical ability to solve problems, design systems, and understand human behavior based on the fundamental concepts of computer science. The concept of computational thinking is almost needed on every profession in the computerization of society. Teaching computational thinking to cultivate problem solving ability by computer is a challenge of computer science education, especially for the K-12 level. Although studies introduce computational concepts by programming design, computational thinking and computer science are not computer programming. The study uses social simulation content (i.e. NetLogo, which uses muti-agent technology) to scaffold learning computational thinking concepts, such as simple genetic algorithm, parallel computing, artificial neural net, or deadlock (such as dining philosophers). To stimulate learning transfer onto computational thinking, NetLogo models library will be used to motivate reflection and meta-cognition development. Preliminary experimental results came from both questionnaires and artifacts. In the future, Gero's (1990) function-behaviour-structure (FBS) ontology will be used for the qualitative analysis to explain the outcomes of learning transfer.},
  keywords={Computational modeling;Object oriented modeling;Brain modeling;Programming profession;Biological system modeling;Computer languages},
  doi={},
  ISSN={},
  month={Aug},}@INPROCEEDINGS{7757678,
  author={de Araujo, Ana Liz Souto O. and Andrade, Wilkerson L. and Serey Guerrero, Dalton D.},
  booktitle={2016 IEEE Frontiers in Education Conference (FIE)}, 
  title={A systematic mapping study on assessing computational thinking abilities}, 
  year={2016},
  volume={},
  number={},
  pages={1-9},
  abstract={Several initiatives have been created to promote Computational Thinking (CT) abilities in students. There are multiple approaches of assessing CT and wide abilities and skills involved. However, the evidence on how to assess CT has not yet been systematically grouped or reviewed. The goal of our study is to identify and classify approaches to promote CT and the different ways of assessing CT abilities. To achieve this goal, a systematic mapping study was planned and executed. The results reveal that: (i) programming courses are the most common pedagogical approaches to promote CT for K-12 students; (ii) multiple skills are involved in CT, but solving problems, algorithms, and abstraction are most common abilities assessed; and (iii) codes and multi-choice questionnaires are the most common artifacts for assessing CT abilities. This study points out to the fact that there are open questions for exploring and developing new researches for promoting and assessing CT abilities.},
  keywords={Systematics;Education;Programming profession;Context;Libraries;Vehicles},
  doi={10.1109/FIE.2016.7757678},
  ISSN={},
  month={Oct},}@INPROCEEDINGS{7880506,
  author={Robles, Gregorio and Moreno-León, Jesús and Aivaloglou, Efthimia and Hermans, Felienne},
  booktitle={2017 IEEE 11th International Workshop on Software Clones (IWSC)}, 
  title={Software clones in scratch projects: on the presence of copy-and-paste in computational thinking learning}, 
  year={2017},
  volume={},
  number={},
  pages={1-7},
  abstract={Computer programming is being introduced in schools worldwide as part of a movement that promotes Computational Thinking (CT) skills among young learners. In general, learners use visual, block-based programming languages to acquire these skills, with Scratch being one of the most popular ones. Similar to professional developers, learners also copy and paste their code, resulting in duplication. In this paper we present the findings of correlating the assessment of the CT skills of learners with the presence of software clones in over 230,000 projects obtained from the Scratch platform. Specifically, we investigate i) if software cloning is an extended practice in Scratch projects, ii) if the presence of code cloning is independent of the programming mastery of learners, iii) if code cloning can be found more frequently in Scratch projects that require specific skills (as parallelism or logical thinking), and iv) if learners who have the skills to avoid software cloning really do so. The results show that i) software cloning can be commonly found in Scratch projects, that ii) it becomes more frequent as learners work on projects that require advanced skills, that iii) no CT dimension is to be found more related to the absence of software clones than others, and iv) that learners -even if they potentially know how to avoid cloning- still copy and paste frequently. The insights from this paper could be used by educators and learners to determine when it is pedagogically more effective to address software cloning, by educational programming platform developers to adapt their systems, and by learning assessment tools to provide better evaluations.},
  keywords={Cloning;Software;Sprites (computer);Programming profession;Parallel processing;Visualization},
  doi={10.1109/IWSC.2017.7880506},
  ISSN={},
  month={Feb},}@ARTICLE{8502019,
  author={Munoz, Roberto and Villarroel, Rodolfo and Barcelos, Thiago S. and Riquelme, FabiáN and Quezada, ÁNgeles and Bustos-Valenzuela, Patricia},
  journal={IEEE Access}, 
  title={Developing Computational Thinking Skills in Adolescents With Autism Spectrum Disorder Through Digital Game Programming}, 
  year={2018},
  volume={6},
  number={},
  pages={63880-63889},
  abstract={In the last years, many didactic activities have been proposed to develop Computational Thinking (CT) skills in children and adolescents. Among these activities, the digital game programming stands out as a promising alternative considering that it is related to a familiar and motivating context for students. These initiatives are not specifically aimed at individuals with special needs such as the autism spectrum disorder (ASD). Children and adolescents with ASD usually have some limitations related to communication, cognitive flexibility, and interpersonal relationships. However, it seems natural that the skills potentially developed through game programming activities are especially beneficial for the public with ASD. In this paper, we describe the offering and evaluation of a Game Building Workshop adapted to adolescents with this condition. The guidelines used to define the workshop activities are described. An assessment based on the classroom observation and analysis of produced artifacts indicate that the participants acquired CT skills related to programming at a high level. In addition, the collaborative nature of the activities offered a stimulating and welcoming environment for individuals with ASD.},
  keywords={Games;Autism;Conferences;Guidelines;Programming profession;Visualization;Game design workshop;autism spectrum disorder;neurodiversity},
  doi={10.1109/ACCESS.2018.2877417},
  ISSN={2169-3536},
  month={},}@INPROCEEDINGS{9637185,
  author={Souza, Isabelle M. L. and Andrade, Wilkerson L. and Sampaio, Lívia M. R.},
  booktitle={2021 IEEE Frontiers in Education Conference (FIE)}, 
  title={Educational Robotics Applied to Computational Thinking Development: A Systematic Mapping Study}, 
  year={2021},
  volume={},
  number={},
  pages={1-8},
  abstract={Educational Robotics (ER) is a tool that can favor teamwork, stimulate creativity, and the ability to solve students' problems through the process of assembling and programming robots. In this sense, ER has been used to improve educational practices. There are several initiatives that seek to stimulate Computational Thinking (CT) to stand out. Although ER being used to develop CT, there are still no guidelines based on scientific studies that support this use. The objective of this Research Full Paper is to identify: a) the main pedagogical approaches are applied in classes with ER focused on developing students' CT; b) the central difficulties are encountered in classes with ER focused on developing students' CT; c) the CT skills are presents in classes with ER focused on developing students' CT; d) the instruments are used to assess students' CT during classes with ER; e) the students' profile who participated in classes with ER focused o on developing students' CT; f) the educational robotics technologies are adopted in classes focused on developing students' CT. To achieve these goals, we planned and carried out systematic mapping of the literature. The results show that, through ER, CT is approached through the teaching of programming languages in a collaborative way in Early Childhood and High School. The most CT skills observed are related to programming, such as sequencing, algorithm, loop, generalization, decomposition, and debugging. The main instruments for assessing students are tests, and the most significant difficulty is the limitation of class hours. Finally, LEGO® is the most used technology in class.},
  keywords={Systematics;Instruments;Education;Debugging;Robot sensing systems;Teamwork;Object recognition},
  doi={10.1109/FIE49875.2021.9637185},
  ISSN={2377-634X},
  month={Oct},}@INPROCEEDINGS{10398358,
  author={Ouaazki, Abdessalam and Bergram, Kristoffer and Holzer, Adrian},
  booktitle={2023 IEEE International Conference on Teaching, Assessment and Learning for Engineering (TALE)}, 
  title={Leveraging ChatGPT to Enhance Computational Thinking Learning Experiences}, 
  year={2023},
  volume={},
  number={},
  pages={1-7},
  abstract={Given the pervasive reliance on technology in modern society, teaching Computational Thinking (CT) abilities is becoming increasingly relevant. These abilities, such as modeling and coding, have become crucial for a larger audience of students, not only those who wish to become software engineers or computer scientists. Recent advances in Large Language Models (LLMs), such as ChatGPT, provide powerful assistance to complete computational tasks, by simplifying code generation and debugging, and potentially enhancing interactive learning. However, it is not clear if these advances make CT tasks more accessible and inclusive for all students, or if they further contribute to a digital skills divide, favoring the top students. To address this gap, we have created and evaluated a novel learning scenario for transversal CT skills that leveraged LLMs as assistants. We conducted an exploratory field study during the spring semester of 2022, to assess the effectiveness and user experience of LLM-augmented learning. Our results indicate that the usage of ChatGPT as a learning assistant improves learning outcomes. Furthermore, contrary to our predictions, the usage of ChatGPT by students does not depend on prior CT capabilities and as such does not seem to exacerbate prior inequalities.},
  keywords={Computational modeling;Education;Chatbots;User experience;Software;Task analysis;Springs;Large Language Models;Interactive Learning Environments;Collaborative Learning;Human-Computer Interaction},
  doi={10.1109/TALE56641.2023.10398358},
  ISSN={},
  month={Nov},}@INPROCEEDINGS{6685067,
  author={Miller, L. Dee and Soh, Leen-Kiat and Chiriacescu, Vlad and Ingraham, Elizabeth and Shell, Duane F. and Ramsay, Stephen and Hazley, Melissa Patterson},
  booktitle={2013 IEEE Frontiers in Education Conference (FIE)}, 
  title={Improving learning of computational thinking using creative thinking exercises in CS-1 computer science courses}, 
  year={2013},
  volume={},
  number={},
  pages={1426-1432},
  abstract={Promoting computational thinking is one of the top priorities in CS education as well as in other STEM and non-STEM disciplines. Our innovative NSF-funded IC2Think project blends computational thinking with creative thinking so that students leverage their creative thinking skills to “unlock” their understanding of computational thinking. In Fall 2012, we deployed creative exercises designed to engage Epstein's creative competencies (Surrounding, Capturing, Challenging and Broadening) in introductory level CS courses targeting four different groups (CS, engineering, combined CS/physical sciences, and humanities majors). Students combined hands-on problem solving with guided analysis and reflection to connect their creative activities to CS topics such as conditionals and arrays and to real-world CS applications. Evaluation results (approximately 150 students) found that creative thinking exercise completion had a linear “dosage” effect. As students completed more exercises [0/1 – 4], they increased their long-term retention [a computational thinking test], F(3, 98) = 4.76, p =.004, partial Eta2 = .127 and course grades, F(3, 109) = 4.32, p =.006, partial Eta2 = .106. These findings support our belief that the addition of creative thinking exercises to CSCE courses improves the learning of computational knowledge and skills.},
  keywords={Ciphers;Reflection;Writing;Computer science;Data collection;Debugging;Educational institutions;CS1;Creative Thinking;Computational Thinking;College;Computer Science},
  doi={10.1109/FIE.2013.6685067},
  ISSN={2377-634X},
  month={Oct},}@ARTICLE{9063433,
  author={Cachero, Cristina and Barra, Pilar and Meliá, Santiago and López, Otoniel},
  journal={IEEE Access}, 
  title={Impact of Programming Exposure on the Development of Computational Thinking Capabilities: An Empirical Study}, 
  year={2020},
  volume={8},
  number={},
  pages={72316-72325},
  abstract={Today's digital society has turned the development of students' computational thinking capabilities into a critical factor for their future success. As higher education institutions, we need to take responsibility for this development in every degree course we offer, and provide students with the kind of subjects and activities that best contribute to this aim. In this paper, we study the impact of following an introductory programming course on the development of the computational thinking capabilities of university students. In order to achieve this aim, a concurrent cohort observational study was carried out in which we measured both the subjective and objective computational thinking capabilities of 104 participants (50 first year students enrolled on a Bachelor's degree course in Psychology at the Catholic University of Murcia (UCAM), and 54 first year students enrolled on a Bachelor's degree course in Health Information Systems at the University of Alicante (UA)). The statistical procedures applied to test our hypotheses were a two-way mixed ANOVA, a paired-sample T-test and an independent-sample T-test. The data shows that the group at UA had an initial higher subjective perception of their computational capabilities than the group at UCAM. This perception was supported by their objective scores, which were also significantly higher. However, the subjective assessment of computational capability of the UA group diminished after exposure to the programming course, contrasting with the fact that their objective computational capabilities improved significantly. In the UCAM group, both subjective and objective capabilities remained constant over time. Based on these results, we can conclude that computational thinking capabilities are not developed naturally, but need to be trained. Providing such training to all our students, and not only to those enrolled on undergraduate degrees in engineering, is of paramount importance to allow them to face the challenges of their future professions. This paper empirically demonstrates the extent to which exposing subjects to a programming course may contribute to this aim.},
  keywords={Programming profession;Training;Instruments;Psychology;Information systems;Problem-solving;Programming;computational thinking;problem-solving;career development;technology social factors;observational study},
  doi={10.1109/ACCESS.2020.2987254},
  ISSN={2169-3536},
  month={},}@INPROCEEDINGS{6826132,
  author={Gross, Sebastian and Kim, Mischa and Schlosser, Joachim and Mohtadi, Coorous and Lluch, Dan and Schneider, Dorian},
  booktitle={2014 IEEE Global Engineering Education Conference (EDUCON)}, 
  title={Fostering computational thinking in engineering education: Challenges, examples, and best practices}, 
  year={2014},
  volume={},
  number={},
  pages={450-459},
  abstract={Computational Thinking is a core capability for most engineers. The term summarizes a set of skills needed to transform real-life challenges into problems that can be solved with the help of a computer and to apply computer-based solutions to questions at hand. This mindset is fundamental to almost every engineering task. However, teaching Computational Thinking is a great challenge for educators worldwide. In designing and implementing university curricula, one has to take an increasing number of arguments into consideration. Technological progress requires the design, creation, and analysis of increasingly large and complex systems. Engineering working environments and tasks demand interdisciplinary teams and close communication between involved groups. In designing engineering curricula, these factors need to be considered and the necessary skills must be implicitly or explicitly developed. This paper highlights three examples of classes and projects aimed at enabling students to develop and increase Computational Thinking through systematic introduction of computational tools. From these successful case studies, the paper derives six best practices for fostering Computational Thinking in engineering education. A review of several examples is given, that are used to highlight and extract best practices. This provides a comprehensive overview of the relationships and simplifies the application of the aforementioned principles to course and curriculum designs.},
  keywords={Engineering education;Computers;Educational institutions;MATLAB;Robot sensing systems;Hardware;curriculum development;computational thinking;engineering skill set;education concepts specific for engineering education;industry and engineering education;integrated curriculum;education tools;project based learning},
  doi={10.1109/EDUCON.2014.6826132},
  ISSN={2165-9567},
  month={April},}@INPROCEEDINGS{7344063,
  author={Nesiba, Natasha and Pontelli, Enrico and Staley, Timothy},
  booktitle={2015 IEEE Frontiers in Education Conference (FIE)}, 
  title={DISSECT: Exploring the relationship between computational thinking and English literature in K-12 curricula}, 
  year={2015},
  volume={},
  number={},
  pages={1-8},
  abstract={DISSECT (DIScover SciEnce through Computational Thinking) is a project aimed at introducing students to computer science principles by establishing computational thinking (CT) as a problem-solving technique within middle school and high school Science, Technology, Engineering, and Mathematics (STEM) courses. While DISSECT has shown successful integration of CT into middle school and high school STEM curricula, illustrating the pervasive nature of CT, a question remained; “can CT also be infused into humanities courses (e.g., English, Art, History) in addition to scientific courses (e.g., Chemistry, Biology, Computer Science)?” The answer is positive. The objective of this paper is to present one approach to bridge the gap between CT and humanities through the curriculum of a 12th-grade English Literature course. The course blends CT practices with composition and literature to provide students with the ability to write critical and comparative analyses of selected literature. This paper will describe multiple modules that integrate computational thinking into the course, and discuss the results and assessment tools used to measure student competency in computational thinking.},
  keywords={Algorithm design and analysis;Fellows;Computer science;Education;Google;Computers;Problem-solving;Computer science;Computer science education;Computational thinking;English literature;K-12},
  doi={10.1109/FIE.2015.7344063},
  ISSN={},
  month={Oct},}@INPROCEEDINGS{9225910,
  author={Abdullah, Abdul Halim and Othman, Muhammad Asnawi and Ismail, Norulhuda and Rahman, Sharifah Nurarfah S. Abd and Mokhtar, Mahani and Zaid, Norasykin Mohd},
  booktitle={2019 IEEE International Conference on Engineering, Technology and Education (TALE)}, 
  title={Development of Mobile Application for The Concept of Pattern Recognition in Computational Thinking for Mathematics Subject}, 
  year={2019},
  volume={},
  number={},
  pages={1-9},
  abstract={Computational thinking is one of the aspects emphasised in the Malaysian education system. However, the learning aids in the form of mobile applications that support computational thinking for mathematics are very limited in Malaysia. With that notion, this study aims to develop a mobile app for conceptual recognition pattern which is one of the skills in computational thinking for secondary school mathematics. The ADDIE model comprises of five phases which are analysis, design, development, implementation and evaluation are used as references for the development purpose. The earliest three phases of the ADDIE model focus on the aspect of application development. While the last two phases involve the aspects of appraisal from the applications which has been developed and it involved 23 mathematics teachers. Questionnaires with Likert Scale were used in the study as instruments to measure the five main aspects of the applications which are facilitation, usefulness, design, knowledge and suitability. The data was analysed using descriptive statistics based on frequency and percentage. The results of the analysis showed that the majority of respondents gave positive feedback on the five aspects measured in using the application. In conclusion, the mobile app of the pattern recognition concept for computational thinking skills for this mathematics subject has been agreed by the respondents to have good characteristics and brings great potential for the use by teachers and students in mathematics' classes.},
  keywords={Mobile applications;Pattern recognition;Education;Computational modeling;Social sciences;Mathematical model;computational thinking;pattern recognition;mobile application;facilitation;usefulness;design;knowledge;suitability},
  doi={10.1109/TALE48000.2019.9225910},
  ISSN={2470-6698},
  month={Dec},}@ARTICLE{10278231,
  author={Mandanici, Marcella and Spagnol, Simone},
  journal={IEEE Transactions on Education}, 
  title={Integrating Computational Thinking With the Curriculum of Future Professional Musicians}, 
  year={2024},
  volume={67},
  number={6},
  pages={836-845},
  abstract={The purpose of this study is to look at how a music programming course affects the development of computational thinking in undergraduate music conservatory students. In addition to teaching the fundamentals of computational thinking, music programming, and logic, the course addresses the Four C’s of education. The change in students’ attitudes toward computer and algorithmic skills, creativity, communication, and collaboration is measured using a pre- and post-test experimental design. Additionally, computational thinking abilities are assessed through the administration of music analysis, procedural, graphical, and logic quizzes, while creativity is evaluated through a qualitative grading of the students’ final music projects. Results show a general perceived improvement of the students’ attitudes toward the Four C’s as well as a good ability to convert learned computational models into musical creativity. However, more effort is needed in order to guarantee an overall improvement in the students’ actual computational thinking abilities.},
  keywords={Education;Programming profession;Music;Creativity;Production;Collaboration;Visualization;Computational thinking;digital transformation;professional musical education;the Four C’s},
  doi={10.1109/TE.2023.3313394},
  ISSN={1557-9638},
  month={Dec},}@INPROCEEDINGS{9778055,
  author={Chen, Bing-Hong and Huang, Tsui-Feng and Chou, Sheng-Chieh},
  booktitle={2021 International Conference on Technologies and Applications of Artificial Intelligence (TAAI)}, 
  title={Research on Teaching Effectiveness of Computational Thinking Based on Service Learning}, 
  year={2021},
  volume={},
  number={},
  pages={155-161},
  abstract={Computational thinking has been widely regarded as an important ability to adapt to the future. College students use the knowledge they have learned to help elementary students in the community learn computational thinking, thereby enhancing the motivation and achievement of the course. Use Scratch software tools to support the learning of computational thinking. In addition to cultivating students’ basic knowledge and abilities, it also assists the lack of learning resources in community elementary schools through practical actions of service learning, so that students can focus their learning on task-base purposes. Comprehensive research and analysis are conducted based on the evaluation of the students' completed works, the learning satisfaction scale, and the data of the key indicators of self-evaluation of computational thinking, plus the questionnaire survey of the primary school students receiving assistance. The results show that: it helps to stimulate students' desire to learn, thereby significantly improving academic performance and learning motivation. At the same time, it makes students have self-confidence and a sense of accomplishment, and makes learners aware of the inadequacy of self-learning, and promotes their willingness to learn from passive to active.},
  keywords={Education;Learning (artificial intelligence);Task analysis;Software tools;computational thinking;learning motivation;task-based instruction;Scratch},
  doi={10.1109/TAAI54685.2021.00037},
  ISSN={2376-6824},
  month={Nov},}@INPROCEEDINGS{7344415,
  author={Li, Ying and Liu, Yu and Shu, Pan},
  booktitle={2015 IEEE Frontiers in Education Conference (FIE)}, 
  title={Teaching research and practice of blended leaning model based on computational thinking}, 
  year={2015},
  volume={},
  number={},
  pages={1-8},
  abstract={With the wide use of computers, how to make students understand the special way of thinking of computer science and find the appropriate methods to solve problems in their own fields like computer scientists are the challenges for educators. This paper proposed a computational thinking model based on blended learning Mctbbl and a descending dimension method for problem-space transformation. The Mctbbl model analyzes and researches the application of computational thinking in computer science by the organic combination of computational thinking and blended learning in a life-cycle perspective. On one hand, the model can summarize the core concepts and important principles in computer science and extract the typical thoughts and general methods of solving problems; on the other hand, the model can implement the teaching and learning of computational thinking by means of blended learning. Based on the model, the teachers can teach the problem-solving process by using computer more intuitively and clearly and the students can understand the application of computer knowledge more easily and simply. The Mctbbl prolongs the study life cycle which takes preview as beginning, teacher-student discussion as body and practical application as core to ensure integrity, endurance and consistency of teaching.},
  keywords={Decision support systems;Education;Handheld computers;Computational modeling;Automation;Scientific computing;Arrays;Computational Thinking;Blended learning;Descending dimension;Abstract;Automation},
  doi={10.1109/FIE.2015.7344415},
  ISSN={},
  month={Oct},}
